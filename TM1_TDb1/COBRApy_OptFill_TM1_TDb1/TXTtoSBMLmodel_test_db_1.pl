#!usr/bin/perl -w

#Written by: Wheaton Schroeder
#Latest version: 06/16/2020

#Written to turn a model file line iEde2091 into an SMBL file so that cobrapy can use it

#note that BIGG formatting doesn't like square brackets, need to replace square brackets with 
#underscore characters

use strict;

system("python convertWLS_test_db_1.py");

#create the sbml file
open(SBMLFILE, ">test_db_1.xml") or die "could not create/write to sbml file, reason: $!\n";

#read the model, we will need:
#1) a list of compartments

my @comps = ( );

#2) a list of metabolites
#	a) compartment assigned to each species
#can get this from one of the files generated by 

open(METSFILE, "<mets_db_1.txt") or die "could not open metabolites file, reason: $!\n";
chomp(my @mets = <METSFILE>);

#remove formatting from file
shift @mets;
pop @mets;

my %met_comps = ( );

for($a = 0; $a <= $#mets; $a++) {
	
	#remove/edit formatting
	$mets[$a] =~ s/\[(.+)\]/__$1/g;
	$mets[$a] =~ s/\'//g;
	$mets[$a] =~ s/\"//g;
	
	#determine the compartment
	if($mets[$a] =~ /__(.+)/) {
	
		my $temp_comp = $1;
		$met_comps{$mets[$a]} = $temp_comp;
		
		#check if compartment is already in the list 
		#invert the array of the reaction lists into a hash
		my %inv_comps_list = map { $comps[$_] => $_} (0..$#comps);
		
		if(!(exists $inv_comps_list{$temp_comp})) {
			
			push @comps, $temp_comp;
			
		}
		
	
	} else {
		
		$met_comps{$mets[$a]} = "none";
		
		#add none to the compartment list if not added already
		my $temp_comp = "none";
		
		#check if compartment is already in the list 
		#invert the array of the reaction lists into a hash
		my %inv_comps_list = map { $comps[$_] => $_} (0..$#comps);
		
		if(!(exists $inv_comps_list{$temp_comp})) {
			
			push @comps, $temp_comp;
			
		}
		
	}
	
}

#should have all compartments in the list by this point

#3) a list of reactions
#	a) reaction stoichiometry
#	b) reaction type

#define array for list of reaction from the convert file
open(RXNFILE, "<rxns_db_1.txt") or die "could not read the reaction list file, reason: $!\n";
chomp(my @rxns = <RXNFILE>);

#remove formatting lines
shift @rxns;
pop @rxns;

#stores compartment of reaction
my %rxn_comps = ( );

#format lines
for(my $b = 0; $b <= $#rxns; $b++) {
	
	$rxns[$b] =~ s/\[(.+)\]/__$1/g;
	$rxns[$b] =~ s/\"//g;
	$rxns[$b] =~ s/\'//g;
	
	#determine the compartment
	if($rxns[$b] =~ /__(.+)/) {
	
		#stores the compartment
		my $temp_comp = $1;
		$rxn_comps{$rxns[$b]} = $temp_comp;		
	
	} else {
		
		#if no explicit compartment define as compartment none
		$rxn_comps{$rxns[$b]} = "none";
		
	}
	
}

#can get this from files made by the convert code as well
open(STOICHFILE, "<Sij_db_1.txt") or die "could not read stoichiometric file, reason: $!\n";
chomp(my @stoich_file = <STOICHFILE>);

#remove formatting lines
shift @stoich_file;
pop @stoich_file;

#define hash for stoichiometry
my %stoich = ( );

#populate the stoichiometry hash
for(my $c = 0; $c <= $#stoich_file; $c++) {
	
	#make the substitution of double for single quotes, just in case
	$stoich_file[$c] =~ s/\"/\'/g;
	
	#read the metabolite, reaction, and coefficeint for each line
	if ($stoich_file[$c] =~ /^\'(.+?)\'\.\'(.+?)\'\s+(.+?)$/) {
		
		my $met = $1;
		my $rxn = $2;
		my $stoichiometry = $3;
		
		#format the found metabolite and reaction to be consistent
		$met =~ s/\[(.+)\]/__$1/g;
		$rxn =~ s/\[(.+)\]/__$1/g;
		
		$stoich{$met}{$rxn} = $stoichiometry;
		
	}
	
}

#get reaction type
open(RXNTYPEFILE, "<rxntype_db_1.txt") or die "could not open reaction type file, reason: $!\n";
chomp(my @rxn_type_file = <RXNTYPEFILE>);

#remove formatting lines
shift @rxn_type_file;
pop @rxn_type_file;

#initialize a hash to store reaction types
my %rxn_type = ( );

#loop over each line
for(my $d = 0; $d <= $#rxn_type_file; $d++) {
	
	if($rxn_type_file[$d] =~ /^\'(.+)\'\s+(.+?)$/) {
		
		my $rxn_temp = $1;
		my $type_temp = $2;
		
		#format the found reaction in the format
		$rxn_temp =~ s/\[(.+)\]/__$1/g;
		
		$rxn_type{$rxn_temp} = $type_temp;
		
	}
	
}

#need to specify that we are using an SBML and the version taht we are using
printf SBMLFILE "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
printf SBMLFILE "<sbml xmlns=\"http://www.sbml.org/sbml/level3/version2/core\"  xmlns:fbc=\"http://www.sbml.org/sbml/level3/version1/fbc/version2\" level=\"3\" version=\"2\" fbc:required=\"false\">\n\n";

#need to definee the model framework
printf SBMLFILE "\t<model id=\"tdb_1\" name=\"test_database_1\" fbc:strict = \"true\">\n\n";

#make the list of compartments
printf SBMLFILE "\t\t<listOfCompartments>\n";

#iterate over compartments
for(my $e = 0; $e <= $#comps; $e++) {

	#each compartment can be defiend suing a single line
	printf SBMLFILE "\t\t\t<compartment metaid=\"%s\" id=\"%s\" constant=\"true\"/>\n",$comps[$e],$comps[$e];
	
}

#end the list of compartments
printf SBMLFILE "\t\t</listOfCompartments>\n\n";

#next is the list of species
#initialize list
printf SBMLFILE "\t\t<listOfSpecies>\n";

#each species in the list is one line
#utilizing the format for defining the species taken from mohamma's work
for(my $i = 0; $i <= $#mets; $i++) {
	
	#note: we pretty much built the model with everything at "0" charge
	printf SBMLFILE "\t\t\t<species metaid=\"%s\" id=\"%s\" name=\"%s\" compartment=\"%s\" charge=\"0\" initialConcentration=\"0\" hasOnlySubstanceUnits=\"false\" boundaryCondition=\"false\" constant=\"false\" />\n",$mets[$i],$mets[$i],$mets[$i],$met_comps{$mets[$i]};
	
}

#end list
printf SBMLFILE "\t\t</listOfSpecies>\n\n";

#add list of parameters for storing values for reaction bounds
#initialize list
printf SBMLFILE "\t\t<listOfParameters>\n";

printf SBMLFILE "\t\t\t<parameter id=\"irr_f_lb\" value=\"0\" constant=\"true\"/>\n";
printf SBMLFILE "\t\t\t<parameter id=\"irr_f_ub\" value=\"1000\" constant=\"true\"/>\n";
printf SBMLFILE "\t\t\t<parameter id=\"irr_b_lb\" value=\"-1000\" constant=\"true\"/>\n";
printf SBMLFILE "\t\t\t<parameter id=\"irr_b_ub\" value=\"0\" constant=\"true\"/>\n";
printf SBMLFILE "\t\t\t<parameter id=\"rev_lb\" value=\"-1000\" constant=\"true\"/>\n";
printf SBMLFILE "\t\t\t<parameter id=\"rev_ub\" value=\"1000\" constant=\"true\"/>\n";

#end list
printf SBMLFILE "\t\t</listOfParameters>\n\n";

#basic framework for the list of reaction
printf SBMLFILE "\t\t<listOfReactions>\n";

#for each reaction need to define reversibility, list reactants, and list products
for(my $f = 0; $f <= $#rxns; $f++) {
	
	#determine if reaction is reversible
	#note that a "false" reversibility value means only positive reaction rates
	#so type -1 must be listed as "true" and then positive flux must be removed by specifying the correct reaction bounds
	my $reversible = "false";
	my $lb = 0;
	my $ub = 0;
	
	if ($rxn_type{$rxns[$f]} =~ /^-1$/) {
		
		#if value is negative one, then reversible will be false, need to reverse stoichiometry 
		printf SBMLFILE "\t\t\t<reaction id=\"%s\" reversible=\"true\" compartment=\"%s\" fbc:lowerFluxBound=\"irr_b_lb\" fbc:upperFluxBound=\"irr_b_ub\">\n", $rxns[$f],$rxn_comps{$rxns[$f]};
		
		#begin to list reactants
		printf SBMLFILE "\t\t\t\t<listOfReactants>\n";
		
		#loop through stoichiometry file list all positive stoichiometeries as negative since backwards
		#loop through each metabolite, find negative stoichiometries
		for(my $g = 0; $g <= $#mets; $g++) {
			
			#figure out if stoichiometry is negative
			if (exists $stoich{$mets[$g]}{$rxns[$f]}) {

				if($stoich{$mets[$g]}{$rxns[$f]} =~ /^\-/) {
		
					#negative coefficient
					#then the coefficient must be positive, as a reactant
					my $temp = $stoich{$mets[$g]}{$rxns[$f]};
					
					#remove the netagative
					$temp =~ s/\-//g;
					
					#write the line
					#each reactant has a single line
					printf SBMLFILE "\t\t\t\t\t<speciesReference species=\"%s\" stoichiometry=\"%s\" constant=\"true\"/>\n", $mets[$g], $temp;
				
				}
			
			}
			
		}
		
		#end of list of reactants
		printf SBMLFILE "\t\t\t\t</listOfReactants>\n";
		
		#next write the products
		#begin to list products
		printf SBMLFILE "\t\t\t\t<listOfProducts>\n";
		
		#loop through stoichiometry file list all positive stoichiometeries
		#loop through each metabolite, find negative stoichiometries
		for(my $h = 0; $h <= $#mets; $h++) {
			
			#eliminate negative stoichiometric coefficients
			if (exists $stoich{$mets[$h]}{$rxns[$f]}) {

				if ($stoich{$mets[$h]}{$rxns[$f]} =~ /^\-/) {
				
					#negative coefficient
				
				} else {
					
					#positive coefficient
					#so will be a product for a "-1" reaction type
					
					#remove the netagative
					my $temp = $stoich{$mets[$h]}{$rxns[$f]};
					$temp =~ s/\-//g;
					
					#positive coefficient
					printf SBMLFILE "\t\t\t\t\t<speciesReference species=\"%s\" stoichiometry=\"%s\" constant=\"true\"/>\n", $mets[$h], $temp;
					
				}
				
			}
			
		}
			
		#end of list of products
		printf SBMLFILE "\t\t\t\t</listOfProducts>\n";
		
	} elsif ($rxn_type{$rxns[$f]} =~ /^1$/) {
		
		#if value is positive one, then reversible will be false, set upper bound as M and lower as 0
		#initialize the reaction
		printf SBMLFILE "\t\t\t<reaction id=\"%s\" reversible=\"false\" compartment=\"%s\" fbc:lowerFluxBound=\"irr_f_lb\" fbc:upperFluxBound=\"irr_f_ub\">\n", $rxns[$f],$rxn_comps{$rxns[$f]};
		
		#begin to list reactants
		printf SBMLFILE "\t\t\t\t<listOfReactants>\n";
		
		#loop through stoichiometry file list all negative stoichiometeries
		#loop through each metabolite, find negative stoichiometries
		for(my $g = 0; $g <= $#mets; $g++) {
			
			#figure out if stoichiometry is negative
			if (exists $stoich{$mets[$g]}{$rxns[$f]}) {

				if($stoich{$mets[$g]}{$rxns[$f]} =~ /^\-/) {
		
					#remove the netagative
					my $temp = $stoich{$mets[$g]}{$rxns[$f]};
					$temp =~ s/\-//g;
					
					#each reactant has a single line
					printf SBMLFILE "\t\t\t\t\t<speciesReference species=\"%s\" stoichiometry=\"%s\" constant=\"true\"/>\n", $mets[$g], $temp;
				
				}
			
			}
			
		}
		
		#end of list of reactants
		printf SBMLFILE "\t\t\t\t</listOfReactants>\n";
		
		#next write the products
		#begin to list products
		printf SBMLFILE "\t\t\t\t<listOfProducts>\n";
		
		#loop through stoichiometry file list all positive stoichiometeries
		#loop through each metabolite, find negative stoichiometries
		for(my $h = 0; $h <= $#mets; $h++) {
			
			#eliminate negative stoichiometric coefficients
			if (exists $stoich{$mets[$h]}{$rxns[$f]}) {

				if ($stoich{$mets[$h]}{$rxns[$f]} =~ /^\-/) {
				
					#negative coefficient
					#so will be a reactant				
					
				
				} else {
					
					#positive coefficient, is a product
					#remove the netagative
					my $temp = $stoich{$mets[$h]}{$rxns[$f]};
					$temp =~ s/\-//g;
					
					#positive coefficient
					printf SBMLFILE "\t\t\t\t\t<speciesReference species=\"%s\" stoichiometry=\"%s\" constant=\"true\"/>\n", $mets[$h], $temp;
					
				}
				
			}
			
		}
			
		#end of list of products
		printf SBMLFILE "\t\t\t\t</listOfProducts>\n";
		
	} else {
		
		#otherwise reversible
		#initialize the reaction
		printf SBMLFILE "\t\t\t<reaction id=\"%s\" reversible=\"true\" compartment=\"%s\" fbc:lowerFluxBound=\"rev_lb\" fbc:upperFluxBound=\"rev_ub\">\n", $rxns[$f],$rxn_comps{$rxns[$f]};
		
		#begin to list reactants
		printf SBMLFILE "\t\t\t\t<listOfReactants>\n";
		
		#loop through stoichiometry file list all negative stoichiometeries
		#loop through each metabolite, find negative stoichiometries
		for(my $g = 0; $g <= $#mets; $g++) {
			
			#figure out if stoichiometry is negative
			if (exists $stoich{$mets[$g]}{$rxns[$f]}) {

				if($stoich{$mets[$g]}{$rxns[$f]} =~ /^\-/) {
					
					#positive coefficient, is a product
					#remove the netagative
					my $temp = $stoich{$mets[$g]}{$rxns[$f]};
					$temp =~ s/\-//g;
		
					#each reactant has a single line
					printf SBMLFILE "\t\t\t\t\t<speciesReference species=\"%s\" stoichiometry=\"%s\" constant=\"true\"/>\n", $mets[$g], $temp;
				
				}
			
			}
			
		}
		
		#end of list of reactants
		printf SBMLFILE "\t\t\t\t</listOfReactants>\n";
		
		#next write the products
		#begin to list products
		printf SBMLFILE "\t\t\t\t<listOfProducts>\n";
		
		#loop through stoichiometry file list all positive stoichiometeries
		#loop through each metabolite, find negative stoichiometries
		for(my $h = 0; $h <= $#mets; $h++) {
			
			#eliminate negative stoichiometric coefficients
			if (exists $stoich{$mets[$h]}{$rxns[$f]}) {

				if ($stoich{$mets[$h]}{$rxns[$f]} =~ /^\-/) {
				
					#negative coefficient
					#so will be a reactant
				
				} else {
					
					#positive coefficient, is a product
					#remove the netagative
					my $temp = $stoich{$mets[$h]}{$rxns[$f]};
					$temp =~ s/\-//g;
					
					#positive coefficient
					printf SBMLFILE "\t\t\t\t\t<speciesReference species=\"%s\" stoichiometry=\"%s\" constant=\"true\"/>\n", $mets[$h], $temp;
					
				}
				
			}
			
		}
			
		#end of list of products
		printf SBMLFILE "\t\t\t\t</listOfProducts>\n";
		
	}
	
	#end of reaction details
	#begin to list products
	printf SBMLFILE "\t\t\t</reaction>\n";
	
}

printf SBMLFILE "\t\t</listOfReactions>\n\n";

#define objective
printf SBMLFILE "\t\t<fbc:listOfObjectives fbc:activeObjective=\"obj\">\n";
printf SBMLFILE "\t\t\t<fbc:objective fbc:id=\"obj\" fbc:type=\"maximize\">\n";
printf SBMLFILE "\t\t\t\t<fbc:listOfFluxObjectives>\n";
printf SBMLFILE "\t\t\t\t\t<fbc:fluxObjective fbc:reaction=\"".$rxns[0]."\" fbc:coefficient=\"1\"/>\n";
printf SBMLFILE "\t\t\t\t</fbc:listOfFluxObjectives>\n";
printf SBMLFILE "\t\t\t</fbc:objective>\n";
printf SBMLFILE "\t\t</fbc:listOfObjectives>\n";

#end the file by stating that we are ending the model and sbml file
printf SBMLFILE "\t</model>\n";
printf SBMLFILE "</sbml>";